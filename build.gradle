plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.31"
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'com.demo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'org.postgresql:postgresql:42.7.2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'com.h2database:h2:2.2.224'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        xml.outputLocation = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**',
                    '**/model/**',
                    '**/exception/**',
                    '**/config/**',
                    '**/*Application.class'
            ])
        }))
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "shakhlanchik_Weather"
        property "sonar.organization", "shakhlanchik"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", System.getenv("SONAR_TOKEN")

        property "sonar.qualitygate.wait", "true"
        property "sonar.java.binaries", "${buildDir}/classes/java/main"
        property "sonar.java.test.binaries", "${buildDir}/classes/java/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "${buildDir}/test-results/test"

        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.exclusions", """
            **/dto/**,
            **/model/**,
            **/exception/**,
            **/config/**,
            **/*Application.java,
            **/resources/**
        """
    }
}

tasks.named('sonar').configure {
    dependsOn jacocoTestReport
}