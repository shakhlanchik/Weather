plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.31"
    id 'jacoco' // Добавляем плагин JaCoCo для анализа покрытия тестов
}

group = 'com.demo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Основные зависимости Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // База данных
    runtimeOnly 'org.postgresql:postgresql:42.7.2'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testImplementation 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Документация API
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

    // DevTools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Тестирование (оставить только это!)
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.5.1'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Генерируем отчет после выполнения тестов
}

jacoco {
    toolVersion = "0.8.7" // Версия JaCoCo
}

jacocoTestReport {
    dependsOn test // Зависит от задачи test
    reports {
        xml.required = true // Для интеграции с CI/CD
        html.required = true // Для локального просмотра
        csv.required = false
    }

    // Исключаем из отчета классы, которые не нужно учитывать
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/demo/weatherapi/dto/**', // Исключаем DTO
                    'com/demo/weatherapi/model/**', // Исключаем сущности
                    'com/demo/weatherapi/exception/**', // Исключаем исключения
                    'com/demo/weatherapi/config/**', // Исключаем конфигурации
            ])
        }))
    }
}

// Проверяем покрытие кода (минимум 80%)
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8 // 80% покрытия
            }
        }
    }
}

// Запускаем проверку покрытия после генерации отчета
check.dependsOn jacocoTestCoverageVerification